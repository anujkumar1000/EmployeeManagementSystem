/*
 * This file is generated by jOOQ.
 */
package com.leadsquared.employeemanagement.jooq.tables;


import com.leadsquared.employeemanagement.jooq.DefaultSchema;
import com.leadsquared.employeemanagement.jooq.Keys;
import com.leadsquared.employeemanagement.jooq.enums.PhonePhoneType;
import com.leadsquared.employeemanagement.jooq.tables.records.PhoneRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Phone extends TableImpl<PhoneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>phone</code>
     */
    public static final Phone PHONE = new Phone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhoneRecord> getRecordType() {
        return PhoneRecord.class;
    }

    /**
     * The column <code>phone.phone_id</code>.
     */
    public final TableField<PhoneRecord, Long> PHONE_ID = createField(DSL.name("phone_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>phone.phone_number</code>.
     */
    public final TableField<PhoneRecord, Long> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>phone.phone_type</code>.
     */
    public final TableField<PhoneRecord, PhonePhoneType> PHONE_TYPE = createField(DSL.name("phone_type"), SQLDataType.VARCHAR(15).nullable(false).asEnumDataType(PhonePhoneType.class), this, "");

    /**
     * The column <code>phone.is_primary</code>.
     */
    public final TableField<PhoneRecord, Byte> IS_PRIMARY = createField(DSL.name("is_primary"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>phone.department_id</code>.
     */
    public final TableField<PhoneRecord, Long> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>phone.project_id</code>.
     */
    public final TableField<PhoneRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>phone.employee_id</code>.
     */
    public final TableField<PhoneRecord, Long> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.BIGINT, this, "");

    private Phone(Name alias, Table<PhoneRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Phone(Name alias, Table<PhoneRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>phone</code> table reference
     */
    public Phone(String alias) {
        this(DSL.name(alias), PHONE);
    }

    /**
     * Create an aliased <code>phone</code> table reference
     */
    public Phone(Name alias) {
        this(alias, PHONE);
    }

    /**
     * Create a <code>phone</code> table reference
     */
    public Phone() {
        this(DSL.name("phone"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PhoneRecord, Long> getIdentity() {
        return (Identity<PhoneRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PhoneRecord> getPrimaryKey() {
        return Keys.KEY_PHONE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PhoneRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PHONE_PHONE_ID);
    }

    @Override
    public Phone as(String alias) {
        return new Phone(DSL.name(alias), this);
    }

    @Override
    public Phone as(Name alias) {
        return new Phone(alias, this);
    }

    @Override
    public Phone as(Table<?> alias) {
        return new Phone(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(String name) {
        return new Phone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(Name name) {
        return new Phone(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(Table<?> name) {
        return new Phone(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Phone where(Condition condition) {
        return new Phone(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Phone where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Phone where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Phone where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Phone where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Phone where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Phone where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Phone where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Phone whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Phone whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
