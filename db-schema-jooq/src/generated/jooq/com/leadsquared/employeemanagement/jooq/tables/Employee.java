/*
 * This file is generated by jOOQ.
 */
package com.leadsquared.employeemanagement.jooq.tables;


import com.leadsquared.employeemanagement.jooq.DefaultSchema;
import com.leadsquared.employeemanagement.jooq.Keys;
import com.leadsquared.employeemanagement.jooq.tables.records.EmployeeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Employee extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>employee</code>
     */
    public static final Employee EMPLOYEE = new Employee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>employee.createdBy</code>.
     */
    public final TableField<EmployeeRecord, String> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>employee.created_on</code>.
     */
    public final TableField<EmployeeRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>employee.modifiedBy</code>.
     */
    public final TableField<EmployeeRecord, String> MODIFIEDBY = createField(DSL.name("modifiedBy"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>employee.modified_on</code>.
     */
    public final TableField<EmployeeRecord, LocalDateTime> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>employee.first_name</code>.
     */
    public final TableField<EmployeeRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>employee.middle_name</code>.
     */
    public final TableField<EmployeeRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>employee.last_name</code>.
     */
    public final TableField<EmployeeRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>employee.email</code>.
     */
    public final TableField<EmployeeRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>employee.employee_id</code>.
     */
    public final TableField<EmployeeRecord, Long> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>employee.department_id</code>.
     */
    public final TableField<EmployeeRecord, Long> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>employee.project_id</code>.
     */
    public final TableField<EmployeeRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>employee.phone_id</code>.
     */
    public final TableField<EmployeeRecord, Long> PHONE_ID = createField(DSL.name("phone_id"), SQLDataType.BIGINT, this, "");

    private Employee(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>employee</code> table reference
     */
    public Employee(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>employee</code> table reference
     */
    public Employee(Name alias) {
        this(alias, EMPLOYEE);
    }

    /**
     * Create a <code>employee</code> table reference
     */
    public Employee() {
        this(DSL.name("employee"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<EmployeeRecord, Long> getIdentity() {
        return (Identity<EmployeeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEE_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmployeeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_EMPLOYEE_EMPLOYEE_ID);
    }

    @Override
    public Employee as(String alias) {
        return new Employee(DSL.name(alias), this);
    }

    @Override
    public Employee as(Name alias) {
        return new Employee(alias, this);
    }

    @Override
    public Employee as(Table<?> alias) {
        return new Employee(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(String name) {
        return new Employee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Name name) {
        return new Employee(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Table<?> name) {
        return new Employee(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Employee where(Condition condition) {
        return new Employee(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Employee where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Employee where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Employee where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Employee where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Employee where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Employee where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Employee where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Employee whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Employee whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
